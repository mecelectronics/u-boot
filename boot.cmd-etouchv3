#### ENVIRONMENT CONFIG ###

# NUMBERS ARE ALWAYS HEX!!!
# e.g. 0x64 == 64 !!

# ram:
# 0x4000 8000 - 0x41ff ffff kernel-runtime (32mb)
# 0x4200 0000 - 0x4400 0000 /workspace
# 0x4200 0000 - 0x427f ffff - dt main
# 0x4280 0000 - 0x42ff ffff - dt second
# 0x4400 0000 - fit image
# 0x4800 0000 - script/dtbo (workaddr)

setenv sourceDevType mmc
setenv sourceDevArg ${devnum}:1

setenv hwoNameEepromPos 0x0
setenv hwoNameEepromBusNr 0x1
setenv hwoNameEepromI2cAddr 0x50
setenv hwoNameEepromLength 0x4

setenv bootdelay 5
if itest "${devnum}" == "1"; then setenv bootPart 2; else setenv bootPart 0; fi

setenv bootargs console=ttyS0,115200 panic=10 drm_kms_helper.drm_leak_fbdev_smem=1 cma=256M imgsource=/dev/mmcblk${bootPart}p3:::images/ bind_imgsource=/mnt/rootfsimg fitmodules=/dev/mmcblk${bootPart}p1:vfat::

setenv bootCmd "bootm"
setenv kernelName "uImage"
setenv kernelAddr  0x44000000

setenv fitKernel "kernel@1"
setenv fitInitrd "ramdisk@1"
setenv fitDt "devicetree.dtb@1"

setenv fitName "boot.itb"
setenv fitAddr  0x44000000
setenv fitConfig "config@1"

setenv workAddrRam 0x48000000

setenv dtName "devicetree.dtb"
setenv dtBaseAddr 0x42000000
setenv dtSecondAddr 0x42800000
setenv dtOverlayAddr ${workAddrRam}

setenv initRdName ""
setenv initRdAddr 0x46000000

### "FUNCTIONS" ###
# U-Boot shell doesn't support functions, but it can run a variable with some logic
# The semantics are:
# * setenv function1 <commands>			command/function/environment variable named "function1"
# * run function1 function2 ...			runs commands from function1, if successful runs commands function2, etc.
# * setenv command_list '				runs commands after each other independent of their return values (ie. run all comands in list)
#		command1
#		command2
#		...'
#	run command_list

# Function: load_fit_overlay
# Environment variables:
# "arguments":
# 	(r) overlay					Overlay name to load (dtbo and/or scr)
# "global variables":
#	(rw) hwOverlayList		List of loaded overlays
# "constant global defines":
#	(r) sourceDevType sourceDevArg dtOverlayAddr dtSecondAddr dtBaseAddr workAddrRam
#
# Bash Pseudocode:
# 	loadFile "${overlay}.dtbo" && copyDtbToTempArea && resizeTempAreaDtb && applyDtboToTempArea && copyDtbToOriginal && publishToDtb
#	loadFile "${overlay}.scr" && source "${overlay}.scr" && publishToDtb
#   ...with a few echo to log what's happening
#
# we need to apply the dtbo on a copy of the dtb
# because it breaks the dtb if it fails to apply
# $filesize is automatic from u-boot
setenv load_overlay_publish 'fdt addr ${dtBaseAddr} && fdt set /mec/hw_overlays/ ${overlayFile} && setenv hwOverlayList "${hwOverlayList} ${overlayFile}"'
setenv load_overlay_dtbo_patch 'fdt move ${dtBaseAddr} ${dtSecondAddr} && fdt resize ${filesize} && fdt apply ${dtOverlayAddr} && fdt move ${dtSecondAddr} ${dtBaseAddr}'

setenv load_fit_overlay_dtbo_do 'echo "Loading: ${overlayFile}" && imxtract ${fitAddr} "${overlayFile}@1" ${dtOverlayAddr} && run load_overlay_dtbo_patch load_overlay_publish'
setenv load_fit_overlay_dtbo 'run load_fit_overlay_dtbo_do || echo "Could not load ${overlayFile}"'
# load additional script needed by hardware 
setenv load_fit_overlay_scr_do 'echo "Loading: ${overlayFile}" && imxtract ${fitAddr} "${overlayFile}@1" ${workAddrRam} && source ${workAddrRam} && run load_overlay_publish'
setenv load_fit_overlay_scr 'run load_fit_overlay_scr_do || echo "Could not load ${overlayFile}"'

setenv load_fit_overlay '
	setenv overlayFile "${overlay}.dtbo"
	run load_fit_overlay_dtbo
	setenv overlayFile "${overlay}.scr"
	run load_fit_overlay_scr'
	
	
setenv load_overlay_dtbo_do 'echo "Loading: ${overlayFile}" && load ${sourceDevType} ${sourceDevArg} ${dtOverlayAddr} "${overlayFile}" && run load_overlay_dtbo_patch load_overlay_publish'
setenv load_overlay_dtbo 'run load_overlay_dtbo_do || echo "Could not load ${overlayFile}"'
# load additional script needed by hardware 
setenv load_overlay_scr_do 'echo "Loading: ${overlayFile}" && load ${sourceDevType} ${sourceDevArg} ${workAddrRam} "${overlayFile}" && source ${workAddrRam} && run load_overlay_publish'
setenv load_overlay_scr 'run load_overlay_scr_do || echo "Could not load ${overlayFile}"'

setenv load_overlay '
	setenv overlayFile "overlays/${overlay}.dtbo"
	run load_overlay_dtbo
	setenv overlayFile "overlays/${overlay}.scr"
	run load_overlay_scr'


# Function load_eeprom_overlay_name
# Environment variables:
# "constant global defines":
#	(r) hwoNameEepromBusNr hwoNameEepromI2cAddr hwoNameEepromPos hwoNameEepromLength workAddrRamData workAddrRam
# "global variables":
#	(w) overlay
#
# Pseudocode:
# 	write "overlay=" to $workAddrRam + 0x17 (0x17 because of "_eeprom_overlay_prefix=" that u-boot writes)
#	read 4 bytes from eeprom and put them after "overlay=" (0x1F bytes because of "_eeprom_overlay_prefix=overlay=")
#	import environment variable from $workAddrRam + 0x17 (equals overlay=<4 bytes from eeprom>)
setenv load_eeprom_overlay_name_write_prefix '
	setenv _eeprom_overlay_prefix overlay=AAAA
	env export -t ${workAddrRam} _eeprom_overlay_prefix
	env delete -f _eeprom_overlay_prefix'
setenv load_eeprom_overlay_name_load_data 'eeprom read ${hwoNameEepromBusNr} ${hwoNameEepromI2cAddr} ${workAddrRamData} ${hwoNameEepromPos} ${hwoNameEepromLength}'

setenv load_eeprom_overlay_name '
	run load_eeprom_overlay_name_write_prefix
	setexpr workAddrRamData ${workAddrRam} + 0x1F
	run load_eeprom_overlay_name_load_data && setexpr workAddrRamData ${workAddrRam} + 0x17 && env import -t ${workAddrRamData}'


### MAIN CODE ###

# load uEnv.txt so it can override the default values (bootargs, overlay ...)
# and before the kernel/devicetree (also to be able to overwrite it in uEnv.txt)
echo "Loading uEnv.txt..."
if load ${sourceDevType} ${sourceDevArg} ${workAddrRam} "uEnv.txt"; then
    env import -t ${workAddrRam}
else
    echo "Could not find uEnv.txt"
fi

if env exists runCmd; then
	run runCmd
fi

if env exists addBootArgs; then
    setenv bootargs "${bootargs} ${addBootArgs}"
	echo "New bootargs: ${bootargs}"
fi

# load script from emmc boot partition: try boot0, if it fails load from boot1
setenv load_from_boot0 "mmc dev 1 1 && mmc read ${workAddrRam} 0x7c0 0x40 && source ${workAddrRam}"
setenv load_from_boot1 "mmc dev 1 2 && mmc read ${workAddrRam} 0x7c0 0x40 && source ${workAddrRam}"
run load_from_boot0 || run load_from_boot1

# load hw_overlays and any additional dtbo/scripts listed in overlayList in uEnv.txt 
setenv hw_overlays "${hw_overlays} ${overlayList}"

setenv dt_initialize_mec 'fdt addr ${dtBaseAddr} && fdt resize 1024 && fdt mknode / mec && fdt mknode /mec sysval && fdt mknode /mec hw_overlays'

setenv load_legacy_images 'load ${sourceDevType} ${sourceDevArg} ${dtBaseAddr} ${dtName} && load ${sourceDevType} ${sourceDevArg} ${kernelAddr} ${kernelName}'

if load ${sourceDevType} ${sourceDevArg} ${fitAddr} ${fitName}; then
	setenv kernelSource "${fitAddr}:${fitKernel}"
	setenv initrdSource "${fitAddr}:${fitInitrd}"
	
	echo "Booting FIT image: kernel ${fitKernel}, initrd ${fitInitrd}, dt ${fitDt}."
	if imxtract ${fitAddr} ${fitDt} ${dtBaseAddr}; then
		echo "6"
		run dt_initialize_mec
		for overlayNm in ${hw_overlays}; do
			setenv overlay ${overlayNm}
			run load_fit_overlay
		done
	else
		echo "FAILED to load ${fitDt} from ${fitName}! It will probably crash."
	fi
elif run load_legacy_images; then
	echo "Booting legacy images: kernel ${kernelName}, dt ${dtName}."
	run dt_initialize_mec
	for overlayNm in ${hw_overlays}; do
		setenv overlay ${overlayNm}
		run load_overlay
	done
	setenv kernelSource ${kernelAddr}

	if test "${initRdName}" = ""; then
		echo "Skipping initrd"
		setenv initrdSource "-"
	else
		echo "Also using initrd ${initRdName}."
		load ${sourceDevType} ${sourceDevArg} ${initRdAddr} ${initRdName}
		setenv initrdSource ${initRdAddr}
	fi
else
	echo "FAILED to load any boot format. Undefined behavior"
	exit
fi
fdt set /mec/hw_overlays list ${hwOverlayList}

${bootCmd} ${kernelSource} ${initrdSource} ${dtBaseAddr}
